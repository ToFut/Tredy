#!/usr/bin/env node

/**
 * AnythingLLM Tool Generator
 * Creates a new tool integration in 60 seconds
 * 
 * Usage: node create-new-tool.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (prompt) => new Promise(resolve => rl.question(prompt, resolve));

async function createNewTool() {
  console.log('\nðŸš€ AnythingLLM Tool Creator\n');
  console.log('This will create a complete tool integration in 60 seconds!\n');

  // Step 1: Basic Info
  const serviceName = await question('1. Service name (e.g., Slack, Notion, GitHub): ');
  const serviceId = serviceName.toLowerCase().replace(/\s+/g, '-');
  
  // Step 2: Choose integration type
  console.log('\n2. How does this service authenticate?');
  console.log('   1) OAuth (Google, Slack, GitHub, etc.)');
  console.log('   2) API Key (OpenAI, Stripe, etc.)');
  console.log('   3) No auth (Public APIs)');
  const authType = await question('Choose (1-3): ');

  // Step 3: Define tools (maximum 4)
  console.log('\n3. What are the 2-4 main actions? (e.g., "send message", "get data")');
  const tools = [];
  
  for (let i = 1; i <= 4; i++) {
    const action = await question(`   Action ${i} (or press Enter to skip): `);
    if (!action) break;
    
    const isCreate = action.toLowerCase().includes('send') || 
                     action.toLowerCase().includes('create') || 
                     action.toLowerCase().includes('post');
    
    tools.push({
      name: action.toLowerCase().replace(/\s+/g, '_'),
      description: action,
      type: isCreate ? 'create' : 'get'
    });
  }

  // Step 4: OAuth specific
  let oauthConfig = {};
  if (authType === '1') {
    console.log('\n4. OAuth Configuration:');
    oauthConfig.provider = await question('   Nango provider name (e.g., slack, github): ');
    console.log('   Required scopes (we\'ll help you find these):');
    oauthConfig.scopes = await question('   Scopes (comma-separated or Enter to auto-detect): ');
  }

  // Generate the files
  console.log('\nâœ¨ Generating your tool integration...\n');

  // 1. Generate MCP Server
  const mcpServer = generateMCPServer(serviceName, serviceId, tools, authType, oauthConfig);
  const mcpPath = path.join(__dirname, `${serviceId}-mcp.js`);
  fs.writeFileSync(mcpPath, mcpServer);
  console.log(`âœ… Created MCP Server: ${mcpPath}`);

  // 2. Generate Nango Setup Script
  if (authType === '1') {
    const nangoSetup = generateNangoSetup(serviceName, serviceId, oauthConfig);
    const nangoPath = path.join(__dirname, `setup-${serviceId}-nango.js`);
    fs.writeFileSync(nangoPath, nangoSetup);
    console.log(`âœ… Created Nango Setup: ${nangoPath}`);
  }

  // 3. Generate Documentation
  const docs = generateDocumentation(serviceName, serviceId, tools, authType, oauthConfig);
  const docsPath = path.join(__dirname, `${serviceId}-setup.md`);
  fs.writeFileSync(docsPath, docs);
  console.log(`âœ… Created Documentation: ${docsPath}`);

  // 4. Update MCP Configuration
  updateMCPConfig(serviceId);
  console.log(`âœ… Updated MCP Configuration`);

  // Final instructions
  console.log('\nðŸŽ‰ Tool Integration Created!\n');
  console.log('Next steps:');
  console.log(`1. ${authType === '1' ? `Run: node setup-${serviceId}-nango.js` : 'No OAuth setup needed'}`);
  console.log('2. Restart AnythingLLM server');
  console.log(`3. Connect ${serviceName} in Workspace Settings â†’ Connectors`);
  console.log(`4. Test with: @agent use ${serviceName} to ${tools[0]?.description || 'do something'}`);

  rl.close();
}

function generateMCPServer(serviceName, serviceId, tools, authType, oauthConfig) {
  return `#!/usr/bin/env node

/**
 * ${serviceName} MCP Server
 * Auto-generated by AnythingLLM Tool Creator
 */

const { Server } = require('@modelcontextprotocol/sdk/server/index.js');
const { StdioServerTransport } = require('@modelcontextprotocol/sdk/server/stdio.js');
const { CallToolRequestSchema, ListToolsRequestSchema } = require('@modelcontextprotocol/sdk/types.js');
${authType === '1' ? "const { Nango } = require('@nangohq/node');" : ''}

class ${serviceName.replace(/\s+/g, '')}MCP {
  constructor() {
    ${authType === '1' ? `
    if (!process.env.NANGO_SECRET_KEY) {
      throw new Error('NANGO_SECRET_KEY environment variable is required');
    }` : ''}

    this.server = new Server(
      { name: '${serviceId}-mcp', version: '1.0.0' },
      { capabilities: { tools: {} } }
    );

    ${authType === '1' ? `
    this.nangoConfig = {
      secretKey: process.env.NANGO_SECRET_KEY,
      host: process.env.NANGO_HOST || 'https://api.nango.dev',
      providerConfigKey: '${oauthConfig.provider}'
    };` : ''}

    this.setupTools();
  }

  getWorkspaceId(args) {
    // Dynamic workspace detection
    if (args?.workspaceId) return args.workspaceId;
    if (process.env.NANGO_CONNECTION_ID) {
      return process.env.NANGO_CONNECTION_ID.replace('workspace_', '');
    }
    return '1'; // Default workspace
  }

  setupTools() {
    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({
      tools: [
        ${tools.map(tool => `{
          name: '${tool.name}',
          description: '${tool.description}. Use when user wants to ${tool.description.toLowerCase()}.',
          inputSchema: {
            type: 'object',
            properties: {
              ${tool.type === 'create' ? `
              content: { type: 'string', description: 'Content to send/create' },
              target: { type: 'string', description: 'Target/recipient' },` : `
              query: { type: 'string', description: 'Search query (optional)' },
              limit: { type: 'number', description: 'Maximum results', default: 10 },`}
              workspaceId: { type: 'string', description: 'Workspace ID (auto-detected)' }
            }${tool.type === 'create' ? ",\n            required: ['content', 'target']" : ''}
          }
        }`).join(',\n        ')}
      ]
    }));

    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;
      const workspaceId = this.getWorkspaceId(args);
      
      try {
        switch (name) {
          ${tools.map(tool => `
          case '${tool.name}':
            return await this.${tool.name}({ ...args, workspaceId });`).join('')}
          default:
            throw new Error(\`Unknown tool: \${name}\`);
        }
      } catch (error) {
        return {
          content: [{ type: 'text', text: \`Error: \${error.message}\` }],
          isError: true
        };
      }
    });
  }

  ${tools.map(tool => `
  async ${tool.name}(args) {
    const workspaceId = args.workspaceId;
    ${authType === '1' ? `
    const nango = new Nango(this.nangoConfig);
    const connectionId = \`workspace_\${workspaceId}\`;
    
    try {
      // Make API call through Nango
      const response = await nango.proxy({
        method: '${tool.type === 'create' ? 'POST' : 'GET'}',
        endpoint: '/api/v1/${tool.name}', // Update with actual endpoint
        connectionId: connectionId,
        providerConfigKey: this.nangoConfig.providerConfigKey,
        ${tool.type === 'create' ? 'data: { content: args.content, target: args.target }' : 'params: { limit: args.limit }'}
      });

      return {
        content: [{
          type: 'text',
          text: \`âœ“ ${tool.description} successful!\`
        }]
      };
    } catch (error) {
      throw new Error(\`Failed to ${tool.description}: \${error.message}\`);
    }` : `
    // Implement your ${tool.description} logic here
    return {
      content: [{
        type: 'text',
        text: \`âœ“ ${tool.description} completed successfully!\`
      }]
    };`}
  }`).join('\n')}

  async start() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error('${serviceName} MCP Server started');
  }
}

if (require.main === module) {
  const server = new ${serviceName.replace(/\s+/g, '')}MCP();
  server.start().catch(error => {
    console.error('Failed to start MCP server:', error);
    process.exit(1);
  });
}

module.exports = ${serviceName.replace(/\s+/g, '')}MCP;`;
}

function generateNangoSetup(serviceName, serviceId, oauthConfig) {
  return `#!/usr/bin/env node

/**
 * Setup ${serviceName} in Nango
 * Auto-generated setup script
 */

console.log('ðŸ“‹ ${serviceName} Nango Setup Guide\\n');

console.log('1. Go to: https://app.nango.dev');
console.log('2. Click "Integrations" â†’ "Add Integration"');
console.log('3. Choose Provider: ${oauthConfig.provider}');
console.log('4. Integration ID: ${serviceId}');
console.log('5. Add OAuth Credentials from ${serviceName} dashboard');
console.log('6. Set Scopes: ${oauthConfig.scopes || 'Check ' + serviceName + ' API docs'}');
console.log('7. Save the integration');
console.log('\\nâœ… Then restart AnythingLLM and connect ${serviceName}!');`;
}

function generateDocumentation(serviceName, serviceId, tools, authType, oauthConfig) {
  return `# ${serviceName} Integration for AnythingLLM

## Quick Start

1. ${authType === '1' ? `**Setup OAuth in Nango:**
   - Go to https://app.nango.dev
   - Add ${serviceName} integration
   - Use key: \`${serviceId}\`` : 'No OAuth setup required'}

2. **Restart AnythingLLM Server**

3. **Connect in AnythingLLM:**
   - Workspace Settings â†’ Connectors
   - Click Connect on ${serviceName}

## Available Commands

${tools.map(tool => `- \`@agent ${tool.description}\``).join('\n')}

## Examples

${tools.map(tool => `\`\`\`
@agent use ${serviceName} to ${tool.description}
\`\`\``).join('\n\n')}

## Troubleshooting

- If connection fails: Check OAuth scopes in Nango
- If commands don't work: Restart AnythingLLM server
- For errors: Check server logs

Generated by AnythingLLM Tool Creator`;
}

function updateMCPConfig(serviceId) {
  const configPath = path.join(__dirname, 'storage/plugins/anythingllm_mcp_servers.json');
  
  try {
    const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    
    // Add universal server entry
    config.mcpServers[`universal-${serviceId}`] = {
      type: 'stdio',
      command: 'node',
      args: [`/Users/segevbin/anything-llm/server/${serviceId}-mcp.js`],
      env: {
        NANGO_SECRET_KEY: process.env.NANGO_SECRET_KEY || '7aac4fec-c1fa-4eba-9100-4b2ef9bc2b91',
        NANGO_HOST: 'https://api.nango.dev'
      },
      anythingllm: {
        autoStart: true,
        workspaceAware: true
      }
    };
    
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
  } catch (error) {
    console.log('Note: Update MCP config manually in storage/plugins/anythingllm_mcp_servers.json');
  }
}

// Run the tool creator
createNewTool().catch(console.error);