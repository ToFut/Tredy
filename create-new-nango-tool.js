#!/usr/bin/env node

/**
 * Interactive Script to Create New Nango Tool Integration
 * Usage: node create-new-nango-tool.js
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');
const { NangoIntegrationGenerator } = require('./server/utils/connectors/nango-integration-generator');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function main() {
  console.log('üöÄ Creating New Nango Tool Integration\n');
  
  try {
    // Gather configuration
    const provider = await question('Provider name (e.g., slack, notion, trello): ');
    const integrationName = await question('Integration name (e.g., slack-messages): ');
    const type = await question('Type [sync/action] (sync): ') || 'sync';
    const description = await question('Description: ');
    
    let config = {
      provider,
      integrationName,
      type,
      description
    };
    
    if (type === 'sync') {
      const apiEndpoint = await question('API endpoint (e.g., /conversations.history): ');
      const syncFrequency = await question('Sync frequency (15m): ') || '15m';
      
      console.log('\nüìã Field Mapping (press Enter to skip):');
      const idField = await question('ID field (id): ') || 'id';
      const nameField = await question('Name field (name): ') || 'name';
      const descField = await question('Description field (description): ') || 'description';
      
      config = {
        ...config,
        apiEndpoint,
        syncFrequency,
        fieldMapping: {
          id: idField,
          name: nameField,
          description: descField,
          createdAt: 'created_at',
          updatedAt: 'updated_at'
        }
      };
    } else {
      const apiEndpoint = await question('API endpoint (e.g., /messages): ');
      const method = await question('HTTP method (POST): ') || 'POST';
      
      config = {
        ...config,
        apiEndpoint,
        method
      };
    }
    
    const workspaceId = await question('Workspace ID (or press Enter for template only): ');
    if (workspaceId) {
      config.workspaceId = workspaceId;
    }
    
    console.log('\nüîß Generating integration files...');
    
    // Generate using the generator
    const generator = new NangoIntegrationGenerator();
    const result = await generator.generateIntegration(config);
    
    // Create directory structure
    const outputDir = path.join(__dirname, 'generated-integrations', provider);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    // Write Nango script
    const scriptPath = path.join(outputDir, `${integrationName}.ts`);
    fs.writeFileSync(scriptPath, result.script);
    
    // Write integration.yaml
    const yamlPath = path.join(outputDir, 'integration.yaml');
    fs.writeFileSync(yamlPath, result.integrationYaml);
    
    // Generate agent plugin
    const pluginContent = generateAgentPlugin(config);
    const pluginPath = path.join(outputDir, `${provider}-connector.js`);
    fs.writeFileSync(pluginPath, pluginContent);
    
    // Generate models
    const modelsContent = generateModels(config);
    const modelsPath = path.join(outputDir, 'models.ts');
    fs.writeFileSync(modelsPath, modelsContent);
    
    console.log('\n‚úÖ Integration created successfully!');
    console.log(`\nGenerated files in: ${outputDir}`);
    console.log(`- ${integrationName}.ts (Nango script)`);
    console.log(`- integration.yaml (Nango config)`);
    console.log(`- ${provider}-connector.js (Agent plugin)`);
    console.log(`- models.ts (TypeScript models)`);
    
    console.log('\nüìã Next Steps:');
    console.log('1. Copy files to appropriate locations:');
    console.log(`   - Copy ${provider}-connector.js to server/utils/agents/aibitat/plugins/`);
    console.log(`   - Register plugin in server/utils/agents/aibitat/plugins/index.js`);
    console.log('2. Configure OAuth in Nango dashboard (https://app.nango.dev)');
    console.log('3. Deploy Nango scripts to your Nango instance');
    console.log('4. Test the integration in your workspace');
    
    if (!workspaceId) {
      console.log('\nüí° To deploy to a workspace, run this script again with a workspace ID');
    }
    
  } catch (error) {
    console.error('‚ùå Error creating integration:', error.message);
  } finally {
    rl.close();
  }
}

function generateAgentPlugin(config) {
  const { provider, type, description } = config;
  const className = provider.charAt(0).toUpperCase() + provider.slice(1) + 'Connector';
  
  return `const AgentPlugin = require("./AgentPlugin");

/**
 * ${className} - ${description}
 * Generated by create-new-nango-tool.js
 */
class ${className} extends AgentPlugin {
  name = "${provider}-connector";
  description = "${description}";
  
  setup() {
    this.functions = [
      ${type === 'sync' ? generateSyncFunctions(config) : generateActionFunctions(config)}
    ];
  }

  ${type === 'sync' ? generateSyncHandlers(config) : generateActionHandlers(config)}
}

module.exports = ${className};
`;
}

function generateSyncFunctions(config) {
  const { provider } = config;
  
  return `{
        name: "search_${provider}_records",
        description: "Search through synced ${provider} data",
        parameters: {
          type: "object",
          properties: {
            query: { type: "string", description: "Search query" },
            limit: { type: "number", default: 10 }
          },
          required: ["query"]
        },
        handler: this.searchRecords.bind(this)
      },
      {
        name: "get_${provider}_record", 
        description: "Get specific ${provider} record by ID",
        parameters: {
          type: "object",
          properties: {
            id: { type: "string", description: "Record ID" }
          },
          required: ["id"]
        },
        handler: this.getRecord.bind(this)
      }`;
}

function generateActionFunctions(config) {
  const { provider, integrationName } = config;
  
  return `{
        name: "${integrationName}_action",
        description: "${config.description}",
        parameters: {
          type: "object",
          properties: {
            data: { type: "object", description: "Action data" }
          },
          required: ["data"]
        },
        handler: this.runAction.bind(this)
      }`;
}

function generateSyncHandlers(config) {
  const { provider } = config;
  
  return `async searchRecords({ query, limit = 10 }) {
    const { NangoIntegration } = require("../../../connectors/nango-integration");
    const nango = new NangoIntegration();
    
    try {
      const results = await nango.searchSyncedData('${provider}', '${provider}Record', {
        query,
        limit
      });
      
      return {
        success: true,
        records: results,
        count: results.length
      };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  async getRecord({ id }) {
    const { NangoIntegration } = require("../../../connectors/nango-integration");
    const nango = new NangoIntegration();
    
    try {
      const record = await nango.getRecord('${provider}', '${provider}Record', id);
      return { success: true, record };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }`;
}

function generateActionHandlers(config) {
  const { provider, integrationName } = config;
  
  return `async runAction({ data }) {
    const { NangoIntegration } = require("../../../connectors/nango-integration");
    const nango = new NangoIntegration();
    
    try {
      const result = await nango.triggerAction('${provider}', '${integrationName}', data);
      return { success: true, result };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }`;
}

function generateModels(config) {
  const { provider } = config;
  const recordName = provider.charAt(0).toUpperCase() + provider.slice(1) + 'Record';
  
  return `// TypeScript models for ${provider} integration
// Generated by create-new-nango-tool.js

export interface ${recordName} {
    id: string;
    name: string;
    description?: string;
    createdAt?: string;
    updatedAt?: string;
    metadata?: any;
}

export interface ${provider.charAt(0).toUpperCase() + provider.slice(1)}Input {
    data: any;
    method?: 'GET' | 'POST' | 'PUT' | 'DELETE';
}

export interface ${provider.charAt(0).toUpperCase() + provider.slice(1)}Output {
    success: boolean;
    data?: any;
    message?: string;
}
`;
}

// Run the script
if (require.main === module) {
  main();
}

module.exports = { main };